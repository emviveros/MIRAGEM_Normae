#N canvas 741 38 563 715 10;
#X obj 7 689 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 9 285 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 9 570 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 9 618 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 82 294 cnv 17 3 270 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 84 577 cnv 17 3 17 empty empty 0-n 5 9 0 16 -228856 -162280
0;
#X text 137 290 signal;
#X text 137 577 signal;
#X text 119 636 2) float, f 9;
#X text 119 622 1) symbol;
#N canvas 978 108 448 523 multichannel 0;
#X msg 141 297 stop;
#X obj 290 357 bng 30 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 30 19 Multi channel playback is possible (up to 64 channels)
when you specify it with a second argument. The number of channels
defines the number 'n' of outlets - where the first outlets are the
channel inputs and the righmost is the bang outlet.;
#X text 30 91 If more than one channel is set \, the name convention
for multi channel arrays is the table name preceded by the channel
number (starting from zero) and "-" \, such as: "0-" \, "1-" \, "2-"
\, "3-" \, and so on...;
#X obj 101 237 else/sample~ stereo_\$0 stereo.wav;
#X msg 101 209 show;
#X obj 131 325 else/tabplayer~ stereo_\$0 2;
#X obj 127 357 else/out~;
#X text 31 152 You can manually set multi channel arrays in Pd like
that or use the [sample~] object \, which does this internally.;
#X text 48 444 If the [sample~] object has fewer channels than the
number of output channels in [tabplayer~] \, the extra channels output
a zero signal.;
#X msg 131 274 play;
#X connect 0 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 6 1 7 1;
#X connect 6 2 1 0;
#X connect 10 0 6 0;
#X restore 455 261 pd multichannel;
#X text 181 577 - the playback of a channel, f 61;
#X obj 220 146 tgl 25 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X msg 291 170 stop;
#X msg 161 164 loop \$1;
#X obj 161 142 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X text 143 304 float;
#X text 181 332 - sets array name, f 61;
#X text 101 332 set <symbol>;
#X text 137 466 <stop>;
#X text 131 480 <pause>;
#X text 125 494 <resume>;
#X text 181 466 - stops playing and outputs 0 (cannot be resumed),
f 61;
#X text 181 494 - resumes playing after being paused, f 61;
#X obj 367 220 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#N canvas 921 149 388 430 signal 0;
#X obj 86 251 phasor~;
#X floatatom 159 274 0 0 0 0 - - -;
#X obj 86 310 else/tabplayer~ \$0-violin;
#X obj 86 345 else/out~;
#X obj 86 219 else/display~ 6;
#X obj 86 168 osc~ 0.1;
#X obj 86 278 *~ 0;
#X obj 159 249 receive \$0-array_size;
#X obj 86 194 *~ 0.2;
#X text 37 11 A signal input can be used as the index position in samples
to read into the array. You can use any signal such as from a [line~]
object or a LFO. A signal offers the ability to read the array at a
varying speed as the example below., f 54;
#X text 37 75 When a signal is connected \, control play messages are
ignored. You can also notice this makes it kind of like [tabread4~].
, f 54;
#X obj 233 338 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 254 337 <= doesn't work;
#X text 37 115 Note that the bang output on the right outlet doesn't
work. You need to analyse the signal input in order to have triggers
if needed., f 54;
#X connect 0 0 6 0;
#X connect 1 0 6 1;
#X connect 2 0 3 0;
#X connect 2 1 11 0;
#X connect 4 0 0 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X restore 443 241 pd signal control;
#X obj 9 653 cnv 3 550 3 empty empty flags 8 12 0 13 -228856 -1 0;
#X obj 84 598 cnv 17 3 17 empty empty n+1 5 9 0 16 -228856 -162280
0;
#X text 149 599 bang;
#X text 357 249 finished;
#X text 360 261 playing;
#X text 181 430 -;
#X text 181 480 - pauses at a particular point (can be resumed), f
61;
#X text 322 170 (same as zero);
#X obj 26 211 send \$0-array_size;
#X obj 26 189 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 290646 256;
#X text 182 635 - number of output channels (default 1 \, maximum 64)
, f 61;
#X obj 305 5 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 4 pd;
#X obj 344 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 22 41 cnv 4 4 4 empty empty Array/table 0 28 2 18 -233017 -1
0;
#X obj 457 12 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 477 12 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 514 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 463 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 501 27 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 113 41 cnv 4 4 4 empty empty player 0 28 2 18 -233017 -1 0;
#X obj 2 4 cnv 15 301 42 empty empty tabplayer~ 20 20 2 37 -233017
-1 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 4 graph;
#X obj 220 225 else/out~;
#X text 182 621 - table name (optional), f 61;
#X obj 220 195 else/tabplayer~ \$0-violin;
#N canvas 1018 51 405 507 loop 0;
#X msg 149 207 loop \$1;
#X obj 149 176 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 296 282 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 288 396 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 65 149 stop;
#X obj 149 117 loadbang;
#X obj 149 246 else/tabplayer~ \$0-violin;
#X obj 149 281 else/out~;
#X obj 106 412 else/out~;
#X obj 105 358 else/tabplayer~ \$0-violin -loop;
#X msg 105 149 play;
#X text 68 34 The loop message takes a float \, where a non-zero value
enables looping and \, 0 disables it (default is disabled). You can
set it to loop with the -loop flag., f 37;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 4 0 6 0;
#X connect 4 0 9 0;
#X connect 5 0 10 0;
#X connect 5 0 1 0;
#X connect 6 0 7 0;
#X connect 6 1 2 0;
#X connect 9 0 8 0;
#X connect 9 1 3 0;
#X connect 10 0 6 0;
#X connect 10 0 9 0;
#X restore 503 182 pd loop;
#X obj 26 143 else/sample~ \$0-violin violin.wav, f 12;
#X msg 281 148 play;
#X text 89 430 play <f \, f \, f>;
#X text 193 430 start playing \, if no float is given \, array is played
from start to end. 1st float sets start \, 2nd sets end (in ms) and
3rd sets speed rate, f 59;
#X text 101 508 loop <float>;
#X text 95 346 start <float>;
#X text 107 360 end <float>;
#X text 101 374 range <f \, f>;
#X text 95 416 speed <float>;
#X obj 257 147 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 149 318 bang;
#X text 181 318 - play (same as non-zero), f 61;
#X text 181 304 - non-zero plays \, <0> stops, f 61;
#X text 312 148 (same as non-zero);
#N canvas 685 112 753 548 basic 0;
#X obj 44 56 tgl 25 0 empty empty empty 17 7 0 10 -228856 -1 -1 0 1
;
#X msg 72 118 stop;
#X text 108 112 same as 'zero': stops playing and outputs 0 (cannot
be resumed), f 33;
#X msg 85 144 pause;
#X msg 96 167 resume;
#X text 127 144 pauses playing;
#X text 140 167 resumes after being paused;
#X text 37 21 Basic control messages:;
#X obj 227 391 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 568 367 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 80 352 else/tabplayer~ \$0-violin;
#X obj 80 390 else/out~;
#X obj 421 329 else/tabplayer~ \$0-violin;
#X obj 421 367 else/out~;
#X text 503 197 play half second from 250 ms;
#X text 76 60 'non zero' plays the array \, zero stops;
#X msg 103 245 start \$1;
#X msg 223 245 speed \$1;
#X floatatom 103 222 8 0 0 0 - - -;
#X floatatom 164 222 8 0 0 0 - - -;
#X floatatom 223 222 5 0 0 0 - - -;
#X msg 421 198 play 250 750;
#X msg 439 225 play 0 1000 50;
#X text 534 224 play 1st second at half speed;
#X text 403 47 The 'play' message can also take up to 3 floats that
specify \; 1) starting point in the array (in ms) \; 2) end point (in
ms) \; 3) speed rate percentage \; If no floats are given \, then it
plays from the setted start/end points in the given rate. The arguments
of the play message changes the parameters of start/end and speed,
f 50;
#X msg 446 250 play 0 1000 -50;
#X text 549 245 play 1st second at half speed in reverse, f 21;
#X msg 452 274 play;
#X text 484 273 play with previous settings;
#X msg 409 175 play 500;
#X text 466 174 play from half second;
#X msg 164 245 end \$1;
#X obj 458 299 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 482 300 same as 'play' without arguments;
#X msg 198 325 reset;
#X text 239 322 reset to start = 0 and end = array size, f 20;
#X obj 59 91 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 83 93 Same as 'non zero';
#X text 107 197 set start/end (in ms) and speed (%);
#X text 251 347 also useful when array size changes, f 18;
#X text 191 483 If 'start' is greater than 'end' \, the values are
swapped.;
#X text 278 291 sets start/end proportionally, f 14;
#X msg 183 297 range 0.25 0.5;
#X connect 0 0 10 0;
#X connect 1 0 10 0;
#X connect 3 0 10 0;
#X connect 4 0 10 0;
#X connect 10 0 11 0;
#X connect 10 1 8 0;
#X connect 12 0 13 0;
#X connect 12 1 9 0;
#X connect 16 0 10 0;
#X connect 17 0 10 0;
#X connect 18 0 16 0;
#X connect 19 0 31 0;
#X connect 20 0 17 0;
#X connect 21 0 12 0;
#X connect 22 0 12 0;
#X connect 25 0 12 0;
#X connect 27 0 12 0;
#X connect 29 0 12 0;
#X connect 31 0 10 0;
#X connect 32 0 12 0;
#X connect 34 0 10 0;
#X connect 36 0 10 0;
#X connect 42 0 10 0;
#X restore 497 142 pd basic;
#X text 143 402 reset;
#X text 181 402 - resets range from 0 to array size, f 61;
#X text 181 346 - sets start point in ms, f 61;
#X text 181 360 - sets end point in ms, f 61;
#X obj 89 240 else/player~;
#X text 181 290 - playback index position, f 61;
#X text 80 89 [tabplayer~] plays arrays \, it's more powerful than
[tabplay~] as it has multichannel support and can play backwards and
in different speeds. It can also loop., f 61;
#X text 181 599 - when it stops/finishes playing or when looping,
f 61;
#X text 31 240 see also:;
#X text 181 374 - sets start and end point range proportionally (from
0 to 1), f 61;
#X text 131 388 pos <f>;
#X text 181 388 - sets position proportionally within range (from 0
to 1), f 61;
#N canvas 895 215 535 507 pos 0;
#X obj 339 393 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 192 354 else/tabplayer~ \$0-violin;
#X obj 192 392 else/out~;
#X msg 215 247 start \$1;
#X msg 335 247 speed \$1;
#X floatatom 215 224 8 0 0 0 - - -;
#X floatatom 276 224 8 0 0 0 - - -;
#X floatatom 335 224 5 0 0 0 - - -;
#X msg 276 247 end \$1;
#X msg 310 327 reset;
#X text 351 324 reset to start = 0 and end = array size, f 20;
#X obj 192 174 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 219 199 set start/end (in ms) and speed (%);
#X text 363 349 also useful when array size changes, f 18;
#X text 390 293 sets start/end proportionally, f 14;
#X msg 295 299 range 0.25 0.5;
#X msg 120 178 pos \$1;
#X obj 123 136 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X floatatom 120 156 0 0 0 0 - - -;
#X text 91 33 The pos message \, from 0 to 1 \, sets a point within
the set range and starts playing from it. But if you retrigger the
object to play again with a bang \, it doesn't restart from that point
anymore \, but the previously set point (which is the start point if
speed is positive or end if the speed is negative). When already playing
\, if you send a 'pos' message \, it jumps to that point and keeps
playing from it.;
#X connect 1 0 2 0;
#X connect 1 1 0 0;
#X connect 3 0 1 0;
#X connect 4 0 1 0;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 4 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X connect 11 0 1 0;
#X connect 15 0 1 0;
#X connect 16 0 1 0;
#X connect 17 0 18 0;
#X connect 18 0 16 0;
#X restore 509 162 pd pos;
#X text 101 522 fade <float>;
#X text 95 536 xfade <float>;
#N canvas 979 219 394 398 fade/xfade 0;
#X obj 317 316 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 74 318 else/out~;
#X msg 100 168 range 0.25 0.5;
#X obj 74 139 loadbang;
#X obj 74 167 tgl 18 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X msg 115 237 fade \$1;
#X floatatom 115 213 5 0 500 0 - - -;
#X msg 176 245 xfade \$1;
#X obj 176 223 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X text 195 222 crossfade mode;
#X text 34 18 You can set a fade in and fade out time in ms with the
'fade' message or '-fade' flag. This fades in from the start point
and fades out to reach the end point., f 54;
#X obj 74 280 else/tabplayer~ \$0-violin -loop -fade 500;
#X text 34 57 When you are looping \, you can set to crossfade mode
with the 'xfade' message or '-xfade' flag. This way \, when it fades
out \, it starts fading before the the loop restarts. The crossfade
is a sine/cosine equal power function., f 54;
#X connect 2 0 11 0;
#X connect 3 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 11 0;
#X connect 5 0 11 0;
#X connect 6 0 5 0;
#X connect 7 0 11 0;
#X connect 8 0 7 0;
#X connect 11 0 1 0;
#X connect 11 1 0 0;
#X restore 467 201 pd fade/xfade;
#X text 181 522 - sets fade time in ms (default 0), f 61;
#X text 181 416 - sets playing speed in percentage (default 100),
f 61;
#X text 181 536 - sets to crossfade mode when looping (default no crossfade)
, f 61;
#X text 181 508 - non zero enables looping \, <0> disbales it (default
0), f 61;
#X text 113 550 sr <float>;
#X text 181 550 - sets sample rate of sample (default \, Pd's sample
rate), f 61;
#X text 97 658 -fade <float> | -speed <float> | -loop: sets to loop
mode -xfade: sets to crossfade mode | -sr <float> | -range <f \, f>
;
#N canvas 979 219 385 451 sr 0;
#X obj 57 314 else/out~;
#X msg 110 188 \$2;
#X obj 110 213 nbx 5 16 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 11
-228856 -1 -1 88200 256;
#X msg 110 236 sr \$1;
#X obj 57 276 else/tabplayer~ \$0-sax;
#X obj 57 194 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 226 249 Pd's sample rate;
#X obj 228 226 nbx 5 16 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 11
-228856 -1 -1 44100 256;
#X obj 228 200 else/sr~;
#X text 22 17 You can set the sample rate of the loaded sound file.
This allows [tabplayer~] to adjust the reading rate to correspond to
the sound file's sample rate., f 54;
#X obj 110 162 else/sample~ \$0-sax sax.wav;
#X text 22 57 In the example below we have a sound file whose sample
rate is 88200 Hz. If Pd's sample rate is at 44100 (the default one)
\, then playing this file at Pd's sample rate would read it at half
speed. The sample rate is given by the [sample~] object and we can
set it with the 'sr' message (or with the -sr flag also)., f 54;
#X text 190 311 You can change Pd's sample rate and see how the file
always plays at the same speed., f 27;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X connect 5 0 4 0;
#X connect 8 0 7 0;
#X connect 10 0 1 0;
#X restore 514 221 pd sr;
#X obj 72 260 else/tabwriter~;
#X connect 12 0 51 0;
#X connect 13 0 51 0;
#X connect 14 0 51 0;
#X connect 15 0 14 0;
#X connect 35 0 34 0;
#X connect 51 0 49 0;
#X connect 51 1 24 0;
#X connect 53 0 35 0;
#X connect 54 0 51 0;
#X connect 62 0 51 0;
