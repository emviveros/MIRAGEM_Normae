#N canvas 595 50 561 444 10;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1 0 0;
#X restore 305 3 graph;
#X obj 22 40 cnv 4 4 4 empty empty Morph 0 28 2 18 -233017 -1 0;
#X obj 3 3 cnv 15 301 42 empty empty morph 20 20 2 37 -233017 -1 0
;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 76 40 cnv 4 4 4 empty empty between 0 28 2 18 -233017 -1 0;
#X obj 1 337 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 1 365 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 129 344 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 1 416 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 1 253 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 129 259 cnv 17 3 30 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 129 294 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 220 181 nbx 4 14 0 1000 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X obj 144 40 cnv 4 4 4 empty empty lists 0 28 2 18 -233017 -1 0;
#X text 191 296 float - morph time in ms, f 50;
#X text 197 261 list - list with one or more elements to morph to;
#X text 197 344 list - morphed list, f 49;
#X text 194 370 1) float - morph time in ms (default 0), f 40;
#X text 215 162 time (ms);
#X obj 382 142 cnv 15 148 73 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-array 3 float 2;
#X coords 0 1 3 -1 150 75 1 0 0;
#X restore 381 141 graph;
#X msg 74 145 set -1 0 1;
#X obj 150 227 else/buffer \$0-array;
#X obj 150 204 else/morph 1000 5 -1 0 1;
#X msg 159 181 1 0.5 -1;
#X msg 150 145 -0.1 -0.45 -0.7;
#X obj 291 181 nbx 4 14 0 1000 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 284 162 grain (ms);
#X text 194 384 1) float - grain time in ms (default 20);
#X text 200 398 3) list - start list values (default 0);
#X obj 129 316 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X text 191 318 float - grain time in ms, f 50;
#X text 59 82 [morph] is an abstraction based on vanilla's [line] \,
but besides floats \, it also works for lists - so you can transition
(or morph) between them. It takes a time to reach the target and a
grain time just like [line]., f 67;
#X text 22 192 see also:;
#X obj 35 212 line;
#X text 161 275 set <list> - set start list values (no output), f
55;
#N canvas 779 127 379 481 more_details 0;
#X obj 181 200 nbx 4 14 0 1000 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 176 181 time (ms);
#X obj 118 308 cnv 15 148 73 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-array-2 3 float 2;
#X coords 0 1 3 -1 150 75 1 0 0;
#X restore 117 307 graph;
#X obj 252 200 nbx 4 14 0 1000 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 245 181 grain (ms);
#X obj 108 251 else/buffer \$0-array-2;
#X obj 108 223 else/morph 1000 5, f 25;
#X msg 108 186 -1 0 1;
#X msg 84 162 -0.5 0.5;
#X msg 50 138 set 1 0 -1;
#X text 45 25 [morph] has no fixed list size \, it'll always output
as many values as it receives. But then \, if it receives less elements
than previously \, it'll forget the values of the extra elements.,
f 47;
#X text 45 75 This also means that if you send it more values than
previously set \, the extra values will be start from 0 \, unless you
use a 'set' message., f 47;
#X text 59 407 This has no use case in mind \, it just is what is it.
The general use case expect lists of the same size., f 45;
#X connect 0 0 7 1;
#X connect 4 0 7 2;
#X connect 7 0 6 0;
#X connect 8 0 7 0;
#X connect 9 0 7 0;
#X connect 10 0 7 0;
#X restore 442 229 pd more_details;
#X connect 19 0 30 1;
#X connect 28 0 30 0;
#X connect 30 0 29 0;
#X connect 31 0 30 0;
#X connect 32 0 30 0;
#X connect 33 0 30 2;
