#N canvas 514 23 560 626 10;
#X obj 222 132 osc~ 440;
#X obj 2 3 cnv 15 301 42 empty empty output~ 20 20 2 37 -233017 -1
0;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 3 pd;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 22 40 cnv 4 4 4 empty empty Stereo 0 28 2 18 -233017 -1 0;
#X obj 76 40 cnv 4 4 4 empty empty Output 0 28 2 18 -233017 -1 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X text 90 186 click & drag ===>;
#X text 296 188 <= Mute button;
#X text 297 170 <== DSP toggle;
#X text 76 81 The [output~] abstraction is a user-friendly gain adjuster
and stereo output \, with controls for "compute audio" (DSP) \, volume
\, gain multiplier \, mute \, dac~ and ramp time.;
#X obj 2 597 cnv 15 552 21 empty \$0-pddp.cnv.footer empty 20 12 0
14 -228856 -66577 0;
#X obj 2 511 cnv 3 550 3 empty \$0-pddp.cnv.more_info more_info 8 12
0 13 -228856 -1 0;
#X obj 2 221 cnv 3 550 3 empty \$0-pddp.cnv.inlets inlets 8 12 0 13
-228856 -1 0;
#X obj 2 393 cnv 3 550 3 empty \$0-pddp.cnv.outlets outlets 8 12 0
13 -228856 -1 0;
#X obj 2 466 cnv 3 550 3 empty \$0-pddp.cnv.argument arguments 8 12
0 13 -228856 -1 0;
#X text 124 231 signal;
#X text 124 253 signal;
#X text 130 276 float;
#X text 123 401 signal;
#X text 123 424 signal;
#X text 129 445 float;
#X text 174 231 - incoming signal routed to left channel output, f
60;
#X text 174 253 - incoming signal routed to right channel output,
f 60;
#X text 173 401 - gain scaled output of left inlet, f 60;
#X text 173 424 - gain scaled output of right inlet, f 60;
#X text 173 445 - slider value (0-1), f 60;
#X text 174 489 - scaling mode: 0 (quartic \, default) \, 1 (dB) or
2 (linear), f 60;
#X text 112 355 <on/off>;
#X text 94 292 dac <float>;
#X text 174 292 - turns dac~ on <1> or off <0> (outlets not affected)
, f 60;
#X text 88 306 gain <float>;
#X text 174 306 - sets linear gain multiplier (values <= 0 are ignored)
, f 60;
#X text 88 371 ramp <float>;
#X text 88 322 mode <float>;
#X text 174 322 - scaling mode: 0 (quartic \, default) \, 1 (dB) or
2 (linear), f 60;
#X text 112 473 1) float;
#X text 174 276 - sets slider (range is clipped to 0-1), f 60;
#X text 174 371 - sets ramp time in ms for slider values (default 20)
, f 60;
#X text 174 473 - [dac~]: <0>: no dac~ output \, <1>: dac~ output (default)
, f 60;
#X text 174 355 - turns DSP Engine (Compute Audio) "On" or "Off",
f 60;
#X text 112 489 2) float, f 9;
#X text 135 338 mute;
#X text 174 338 - mute/unmute button, f 60;
#N canvas 437 158 932 533 examples 0;
#X obj 208 188 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X floatatom 208 208 5 0 0 0 - - -;
#X floatatom 208 359 5 0 0 0 - - -;
#X text 223 187 set slider (0-1);
#X msg 269 262 on;
#X msg 269 284 off;
#X obj 259 216 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X msg 259 237 dac \$1;
#X text 296 262 DSP on;
#X text 295 285 DSP off;
#X obj 125 234 osc~ 440;
#X text 278 216 dac~ on/off;
#X msg 638 228 mode \$1;
#X obj 638 151 vradio 15 0 0 3 \$0-dummy \$0-dummy-set empty 0 -8 0
10 -228856 -1 -1 0;
#X text 612 166 dB;
#X text 588 180 linear;
#X floatatom 638 204 5 0 0 0 - - -;
#X text 49 338 scaled => stereo output, f 9;
#X text 213 336 <= slider value;
#X obj 555 259 osc~ 440;
#X msg 705 234 gain \$1;
#X obj 705 208 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 708 185 hsl 128 15 0.1 2 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X floatatom 638 364 0 0 0 0 - - -;
#X text 582 150 quartic;
#X msg 742 322 ramp \$1;
#X obj 742 296 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 481 78 You can also set a ramp time for the slider value \,
the default is 20 ms and the minimum is 5 ms. This also affects the
slider value input in the right outlet.;
#X obj 717 265 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X text 734 264 set slider (0-1);
#X text 481 17 [output~] has 3 scaling modes for its slider (the default
is "quartic"). You can set a linear gain multiplier \, which needs
to be greater than zero and also represents the maximum linear gain
achieved.;
#X msg 177 156 mute;
#X text 211 157 mute button;
#X text 23 61 If you mute the abstraction \, it also affects the outlets
and it sends no signal. So \, if you don't want to listen but need
the signal through the outlets \, use the 1st argument or the "dac
0" message into the right outlet - as it doesn't affect the outlets.
Using [output~] without the dac~ is useful for gain adjustments only.
;
#X text 726 184 maximum gain;
#X text 24 18 [output~] allows you to switch the DSP engine on or off
\, dac~ output on or off and mute/unmute without any clicks!;
#X text 664 149 <= slider scaling;
#X obj 125 370 else/meter2~;
#X obj 125 288 ./output~ 0;
#X obj 555 302 ./output~;
#X obj 531 363 else/meter2~;
#X connect 0 0 1 0;
#X connect 1 0 38 2;
#X connect 4 0 38 2;
#X connect 5 0 38 2;
#X connect 6 0 7 0;
#X connect 7 0 38 2;
#X connect 10 0 38 0;
#X connect 10 0 38 1;
#X connect 12 0 39 2;
#X connect 13 0 16 0;
#X connect 16 0 12 0;
#X connect 19 0 39 0;
#X connect 19 0 39 1;
#X connect 20 0 39 2;
#X connect 21 0 20 0;
#X connect 22 0 21 0;
#X connect 25 0 39 2;
#X connect 26 0 25 0;
#X connect 28 0 39 2;
#X connect 31 0 38 2;
#X connect 38 0 37 0;
#X connect 38 1 37 1;
#X connect 38 2 2 0;
#X connect 39 0 40 0;
#X connect 39 1 40 1;
#X connect 39 2 23 0;
#X restore 464 131 pd examples;
#N canvas 537 168 743 441 scaling 0;
#X obj 29 54 cnv 15 198 198 empty empty empty 20 12 0 14 -253888 -66577
0;
#N canvas 0 22 452 302 (subpatch) 0;
#X array \$0-dB 441 float 0;
#X array \$0-quartic 441 float 0;
#X array \$0-linear 441 float 0;
#X coords 0 1.01 440 0 200 200 1;
#X restore 29 53 graph;
#X text 96 130 linear;
#X text 23 257 0;
#X text 217 255 1;
#X text 234 78 o;
#X text 234 90 u;
#X text 234 102 t;
#X text 234 127 u;
#X text 234 139 t;
#X text 234 115 p;
#X text 234 160 v;
#X text 234 172 a;
#X text 234 184 l;
#X text 234 196 u;
#X text 234 208 e;
#X text 230 241 0;
#X text 230 51 1;
#X text 270 20 The graph to the left shows us how the scaling modes
work. A linear scaling doesn't really do anything \, the input is the
same as the output. We have then two non linear modes:;
#X text 278 118 -;
#X text 278 74 -;
#X text 128 182 quartic;
#X text 171 220 dB;
#X obj 468 298 osc~ 440;
#X msg 551 311 gain \$1;
#X obj 416 206 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 551 288 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 551 174 vsl 15 80 0 2 0 0 empty empty empty 0 -9 0 10 -233017
-1 -1 0 1;
#X text 557 269 max gain;
#X text 392 203 dB;
#X text 67 262 entry (slider) value;
#X text 287 118 dB: This mode adopts a decibel scale with a range of
100 dB (using the [dbtorms~] object).;
#X text 22 303 The gain value is a simple multiplier to the output
value of the slider and determines the maximum linear gain output regardless
of the scaling mode. For example \, "2" will output the double of the
input amplitude \, and "0.5" half of it. This is useful if your input
isn't loud enough \, if it is too high or even if you're using multiple
[output~] objects as they all add to the same output.;
#X text 287 74 Quartic (default): This mode just gets the slider values
to the power of 4 (so \, for instance \, an input slider value of 0.5
becomes 0.125)., f 57;
#N canvas 0 22 450 300 init-array 0;
#X msg 71 41 441;
#X obj 71 63 t a b;
#X msg 112 85 0, f 4;
#X obj 71 85 until;
#X obj 71 117 f;
#X obj 109 117 + 1;
#X obj 71 232 / 441;
#X obj 71 198 t a a;
#X obj 330 164 t a a;
#X obj 330 232 dbtorms;
#X obj 198 212 / 441;
#X obj 198 180 t a a;
#X obj 198 234 pow 4;
#X obj 330 208 / 4.41;
#X obj 71 256 tabwrite \$0-linear;
#X obj 198 256 tabwrite \$0-quartic;
#X obj 71 18 loadbang;
#X obj 330 256 tabwrite \$0-dB;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 1 1 2 0;
#X connect 2 0 4 1;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 4 0 7 0;
#X connect 4 0 8 0;
#X connect 4 0 11 0;
#X connect 5 0 4 1;
#X connect 6 0 14 0;
#X connect 7 0 6 0;
#X connect 7 1 14 1;
#X connect 8 0 13 0;
#X connect 8 1 17 1;
#X connect 9 0 17 0;
#X connect 10 0 12 0;
#X connect 11 0 10 0;
#X connect 11 1 15 1;
#X connect 12 0 15 0;
#X connect 13 0 9 0;
#X connect 16 0 0 0;
#X restore 146 22 pd init-array;
#X obj 416 231 else/db2lin;
#X obj 468 341 ./output~;
#X connect 23 0 36 0;
#X connect 23 0 36 1;
#X connect 24 0 36 2;
#X connect 25 0 35 0;
#X connect 26 0 24 0;
#X connect 27 0 26 0;
#X connect 35 0 26 0;
#X restore 459 177 pd scaling \; modes & gain;
#N canvas 876 153 511 576 DSP 0;
#X obj 129 295 osc~ 440;
#X msg 212 285 on;
#X msg 228 311 off;
#X msg 177 96 \; pd dsp \$1;
#X obj 177 68 tgl 20 0 empty empty empty 17 7 0 10 -216373 -1 -1 0
1;
#X text 221 344 <= click on the DSP status;
#X text 33 142 These are the usual ways of doing this \, but the [output~]
abstraction offers yet other options.;
#X text 32 18 The DSP engine can be turned on and off in the main Pd
window \, in the "Media" menu or inside a patch with this message to
Pd:;
#X text 32 191 First \, if the DSP is on when you load [output~] \,
it checks the DSP state and loads the GUI accordingly \, where the
top right corner shows the status as either "on" or "off". But this
interface also acts as a toggle so you can click on it and change the
status. Another way of doing that in the patch is with the "on" and
"off" messages to the right inlet.;
#X text 236 358 (it behaves as a toggle);
#X text 40 411 Try the above [output~] abstraction as the only object
sending signals to pd's output \, now change the DSP status with the
volume up in one of the usual ways and with the interface provided
by [output~] (via toggle or messages). You'll notice how changing the
DSP status with [output~] does not 'click'! This is because it automatically
fades in and out when turning it on and off!;
#X obj 129 341 ./output~;
#X connect 0 0 11 0;
#X connect 0 0 11 1;
#X connect 1 0 11 2;
#X connect 2 0 11 2;
#X connect 4 0 3 0;
#X restore 452 154 pd DSP status;
#X text 97 517 [output~] was originally in Pd Extended's extra folder
as a variant of [ezoutput~] from PDDP. This is an improved \, redesigned
and backwards compatible version by Alexandre Porres with extra features.
, f 70;
#X obj 76 231 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 76 252 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 75 401 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 422 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 75 443 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X obj 76 275 cnv 17 3 111 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X obj 202 166 ./output~;
#X text 97 555 This was first developed to be included in Purr Data
\, which also carries [output~]. This is a vanilla compatible version
made available in the ELSE library., f 70;
#X connect 0 0 60 0;
#X connect 0 0 60 1;
#X coords 0 626 1 625 74 39 0;
