#N canvas 560 23 1064 729 12;
#X declare -path else;
#X obj 193 151 *~;
#X obj 293 152 hsl 128 15 0.5 2 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X obj 290 174 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 193 95 osc~ 400;
#X obj 701 455 catch~ \$0-out;
#X obj 193 237 throw~ \$0-out;
#X obj 701 488 graph~ 446 11 -1 1;
#X obj 701 642 out~;
#X text 130 197 Transfer Function, f 8;
#X obj 862 22 declare -path else;
#X obj 193 203 pow~;
#X obj 290 199 f2s~ 50 1;
#X obj 286 69 hsl 128 15 0 1 0 1 empty empty -2 -8 0 0 4 -228856 -1
-1 0 0;
#X obj 283 91 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 283 116 f2s~ 50;
#X text 24 14 We can also use many different kinds of functions that
alter the shape of a sound \, such as power functions., f 70;
#X obj 158 512 *~;
#X obj 258 513 hsl 128 15 0.1 10 1 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X obj 255 535 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 158 456 osc~ 400;
#X obj 158 598 throw~ \$0-out;
#X text 95 558 Transfer Function, f 8;
#X obj 255 560 f2s~ 50 1;
#X obj 251 430 hsl 128 15 0 1 0 1 empty empty -2 -8 0 0 4 -228856 -1
-1 0 0;
#X obj 248 452 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 248 477 f2s~ 50;
#X obj 158 564 power~;
#X obj 778 187 drive~;
#X obj 611 314 *~;
#X obj 863 265 hsl 128 15 0.1 10 1 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X obj 860 287 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 611 258 osc~ 400;
#X obj 611 400 throw~ \$0-out;
#X obj 860 312 f2s~ 50 1;
#X obj 704 232 hsl 128 15 0 1 0 1 empty empty -2 -8 0 0 4 -228856 -1
-1 12700 0;
#X obj 701 254 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 1 256;
#X obj 701 279 f2s~ 50;
#X obj 611 346 expr~ if($v1 > 0 \, 1 - pow(1. - $v1 \, $v2) \, pow(1.
+ $v1 \, $v2) - 1.), f 36;
#X text 838 185 <= check its help file;
#X text 874 345 Transfer Function, f 8;
#X text 26 281 Above \, we have [pow~] \, note that a power function
would originally give us a 'nan' (Not a Number) if a negative signal
'a' is raised by a non integer exponent 'b'. In this case \, [pow~]
gives us "0" instead. for the case of integer exponentials \, the negative
values become positive., f 72;
#X text 26 344 Below \, the [power~] object from ELSE gives us -pow(-a
\, b) in the case of a negative input \, which extends the usual definition
of exponentiation and allows exponentiation of negative signal values.
This makes it a kind of power function waveshaper., f 72;
#X text 566 119 Check also the [drive~] object from ELSE. It has two
modes of waveshaping distortion \, one is the 'tanh' function presented
earlier and the second mode is another power function described in
the equation below., f 63;
#X obj 133 678 expr~ copysign(pow(abs($v1) \, $v2) \, $v1);
#X text 116 650 Here's a way to implement [power~] in [expr~];
#X text 566 68 Try also [power~] with samples and live input. Exponential
values below 1 and towards zero result in a harsh distortion., f 63
;
#X connect 0 0 10 0;
#X connect 1 0 2 0;
#X connect 2 0 11 0;
#X connect 3 0 0 0;
#X connect 4 0 6 0;
#X connect 6 0 7 0;
#X connect 10 0 5 0;
#X connect 11 0 10 1;
#X connect 12 0 13 0;
#X connect 13 0 14 0;
#X connect 14 0 0 1;
#X connect 16 0 26 0;
#X connect 17 0 18 0;
#X connect 18 0 22 0;
#X connect 19 0 16 0;
#X connect 22 0 26 1;
#X connect 23 0 24 0;
#X connect 24 0 25 0;
#X connect 25 0 16 1;
#X connect 26 0 20 0;
#X connect 28 0 37 0;
#X connect 29 0 30 0;
#X connect 30 0 33 0;
#X connect 31 0 28 0;
#X connect 33 0 37 1;
#X connect 34 0 35 0;
#X connect 35 0 36 0;
#X connect 36 0 28 1;
#X connect 37 0 32 0;
