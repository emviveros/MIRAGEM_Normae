#N canvas 428 94 957 490 12;
#X declare -path else;
#X obj 781 30 declare -path else;
#X msg 622 136 clear;
#X obj 498 113 tgl 18 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 498 137 tempo 120 50;
#X msg 603 107 create;
#X text 519 113 <= play;
#X obj 622 217 markov;
#X text 36 21 A Markov chain is a stochastic model describing a sequence
of possible events in which the probability of each event depends only
on the state attained in the previous event., f 60;
#X obj 678 174 stripnote;
#X obj 678 80 keyboard 17 80 2 4 0 0 empty empty;
#X text 36 74 You can use this model to generate random sequences of
notes where the probability of the next note depends on the current
state. For instance \, middle C (MIDI Pitch 60) has 50% change to go
to G (67) 25% chance to go to E (64) and 25% chance to go to F (65).
Then for each of these other values you can also set probabilities
for the next step and so on. The ELSE library has [markov] which can
learn from an input sequence what the probabilities are.;
#X obj 698 339 *~;
#X obj 622 278 mtof;
#X obj 698 394 out~;
#X obj 698 367 plate.rev~ 50 0.6 0.25 0.8 0.5;
#X obj 717 295 adsr~ 50 10 0.7 100;
#X obj 622 252 makenote 1 200;
#X obj 622 304 tri~;
#X text 42 205 In this example you can use [keyboard] from ELSE to
feed pitches to [markov]. If you play 60 and then 67 it learns that
67 comes after 60 as a possibility. The number this transition occurs
is computed as a probability. Hence \, if 60 was followed by 67 7 times
and followed by 65 3 times \, then 67 has the probability to come after
60 70% of the times \, while there's a 30% probability of transitioning
to 65!;
#X text 41 315 Play some note transitions and then use "create" to
generate the chain or "clear" to forget and erase the memory to start
over. Once you have a chain \, bangs into [markov] start playing the
chain.;
#X text 678 216 <= check help file for more;
#N canvas 384 128 995 639 [text] 0;
#X obj 116 184 stripnote;
#X obj 514 188 tgl 18 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 514 241 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 278 282 clear;
#X obj 116 152 note.in;
#X msg 116 24 open;
#X obj 451 398 list length;
#X obj 451 422 t b f;
#X obj 711 495 *~;
#X obj 690 426 mtof;
#X obj 690 457 tri~;
#X obj 711 566 out~;
#X obj 690 270 keyboard 17 80 2 4 0 0 empty empty;
#X obj 690 368 unpack;
#X obj 729 395 / 127;
#X obj 812 240 makenote 127 300;
#X obj 729 426 adsr~ 50 10 0.7 100;
#X obj 711 529 plate.rev~ 50 0.6 0.25 0.8 0.5;
#X obj 137 249 lastvalue;
#X obj 116 215 trigger float float;
#X obj 137 283 pack float float;
#X obj 134 89 trigger anything bang;
#X obj 261 205 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 626 250 display;
#X obj 272 508 s \$0-1st-pitch;
#X obj 505 584 s \$0-next-pitch;
#X obj 626 186 r \$0-next-pitch;
#X obj 812 211 r \$0-next-pitch;
#X obj 278 254 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 256 552 1e+09;
#X obj 152 587 text set \$0-Matrix;
#X obj 278 313 text define \$0-Matrix;
#X f 11;
#X msg 272 482 \$1;
#X obj 95 423 t f f, f 11;
#X obj 137 311 t l l, f 14;
#X obj 40 423 sel -1;
#X obj 40 497 t b b;
#X obj 209 552 list;
#X obj 95 453 text get \$0-Matrix, f 9;
#X obj 95 496 list append;
#X obj 261 363 text size \$0-Matrix;
#X obj 261 393 t b f;
#X obj 272 457 text get \$0-Matrix;
#X obj 272 426 rand.i;
#X obj 514 214 tempo 120 50;
#X obj 637 214 r \$0-1st-pitch;
#X obj 311 393 - 1;
#X text 177 60 <= read/analyze;
#X obj 40 377 text search \$0-Matrix, f 11;
#X obj 514 293 text search \$0-Matrix;
#X obj 521 495 swap;
#X obj 451 355 text get \$0-Matrix, f 9;
#X obj 518 429 - 1;
#X obj 505 553 display;
#X obj 505 527 text get \$0-Matrix;
#X obj 451 461 rand.i 1 1;
#X obj 514 323 t f f;
#X obj 514 265 float;
#X obj 137 341 unpack f f;
#X msg 134 60 dump;
#X text 363 322 <= click;
#X obj 116 121 midi bday.mid;
#X text 332 26 This patch reads a MIDI file and stores the notes in
a [text] object. The storage takes into account the preceding note.
Click on the [text] define object and see how we have a row for acch
note and the list that follows are the notes that come after the first
note is played. We then get the size of the [text] (number of lines
actually) and get a random value from it., f 88;
#X text 538 187 <= start;
#X text 329 420 get 1st pitch;
#X text 332 103 When we start \, we get the current pitch and search
for it in the [text] so we find the line it belongs to. Then we get
the list lenght and randomly pick one of its elements. Since repeated
notes are stored more than once \, they have a different weigth. the
chosen pitch is stored for the next round., f 88;
#X connect 0 0 19 0;
#X connect 1 0 44 0;
#X connect 2 0 57 0;
#X connect 3 0 31 0;
#X connect 4 0 0 0;
#X connect 4 1 0 1;
#X connect 5 0 61 0;
#X connect 6 0 7 0;
#X connect 7 0 55 0;
#X connect 7 1 52 0;
#X connect 8 0 17 0;
#X connect 9 0 10 0;
#X connect 10 0 8 0;
#X connect 12 0 13 0;
#X connect 13 0 9 0;
#X connect 13 1 14 0;
#X connect 14 0 16 0;
#X connect 15 0 12 0;
#X connect 15 1 12 1;
#X connect 16 0 8 1;
#X connect 17 0 11 0;
#X connect 18 0 20 0;
#X connect 19 0 18 0;
#X connect 19 1 20 1;
#X connect 20 0 34 0;
#X connect 21 0 61 0;
#X connect 21 1 28 0;
#X connect 22 0 40 0;
#X connect 23 0 57 1;
#X connect 26 0 23 0;
#X connect 27 0 15 0;
#X connect 28 0 3 0;
#X connect 28 0 18 1;
#X connect 29 0 30 1;
#X connect 32 0 24 0;
#X connect 33 0 38 0;
#X connect 33 1 30 1;
#X connect 34 0 58 0;
#X connect 34 1 37 1;
#X connect 35 0 36 0;
#X connect 35 1 33 0;
#X connect 36 0 37 0;
#X connect 36 1 29 0;
#X connect 37 0 30 0;
#X connect 38 0 39 0;
#X connect 39 0 30 0;
#X connect 40 0 41 0;
#X connect 41 0 43 0;
#X connect 41 1 46 0;
#X connect 42 0 32 0;
#X connect 43 0 42 0;
#X connect 44 0 2 0;
#X connect 45 0 23 0;
#X connect 46 0 43 2;
#X connect 48 0 35 0;
#X connect 49 0 56 0;
#X connect 50 0 54 0;
#X connect 50 1 54 1;
#X connect 51 0 6 0;
#X connect 52 0 55 2;
#X connect 53 0 25 0;
#X connect 54 0 53 0;
#X connect 55 0 50 0;
#X connect 56 0 51 0;
#X connect 56 1 50 1;
#X connect 57 0 49 0;
#X connect 58 0 48 0;
#X connect 58 1 39 1;
#X connect 59 0 21 0;
#X connect 61 0 4 0;
#X connect 61 1 22 0;
#X restore 325 443 pd [text];
#X obj 678 31 notein;
#X obj 678 55 pack;
#X text 41 382 For a lower level implementation of a markov chain with
the [text] object \, see the subpatch below. The [markov] object actually
uses a different algorithm.;
#X connect 1 0 6 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 4 0 6 0;
#X connect 6 0 16 0;
#X connect 8 0 6 1;
#X connect 9 0 8 0;
#X connect 11 0 14 0;
#X connect 12 0 17 0;
#X connect 14 0 13 0;
#X connect 15 0 11 1;
#X connect 16 0 12 0;
#X connect 16 1 15 0;
#X connect 17 0 11 0;
#X connect 22 0 23 0;
#X connect 22 1 23 1;
#X connect 23 0 9 0;
